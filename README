
production loop
----------------
  airs2chirp    - translate AIRS to CHIRP granules
  cris2chirp    - interpolate CrIS to CHIRP granules
  read_airs_h4  - read an AIRS HDF4 granule
  read_cris_h5  - read a CrIS H5/netCDF granule
  airs_loop     - run airs2chirp on a list of days
  cris_loop     - run cris2chirp on a list of days
  chirp_batch   - run chirp translation on doy = job array ID

support and test
-----------------
  a2cris_lin      - airs2cris linearization test
  a2cris_srfs     - airs2cris linearization with SRF plots
  airs_num_synth  - multi-granule count of L1cNumSynth values
  check_synth     - counts for synthetic and fixed channels
  nedn_est        - NEdN estimate for the AIRS-to-CrIS translation
  nedn_interp     - NEdN interpolation demo
  pen_lift        - add NaNs for pen lift at frequency gaps
  L1c_fields      - dump all L1c fields and attributes

netCDF format
--------------
  airs2chirp.cdl  - AIRS CHIRP SDR netCDF CDL template
  cris2chirp.cdl  - CrIS CHIRP SDR netCDF CDL template
  airs2chirp.nc   - AIRS CHIRP SDR netCDF initial file
  cris2chirp.nc   - CrIS CHIRP SDR netCDF initial file

  ncgen -o airs2chirp.nc airs2chirp.cdl
  ncgen -o cris2chirp.nc cris2chirp.cdl

notes
------

Starting from an existing netCDF file (a UW CrIS granule) I've been
able to dump the CDL format spec, edit it extensively, removing some
variables and add new ones, write an empty netCDF file from the CDL
spec, and write data to the netCDF file.  The UW file (and I think
all the new NASA netCDF products) are bloated and groaning with
attributes, and my new netCDF file is, too.  Creating something like
that from scratch would be a major hassle, but copying and modifying
it is not as bad.

../chirp_test > ncdump -h uw_sdr_test.nc > uw_sdr_test.cdl
../chirp_test > ncgen -o ncgen_test.nc uw_sdr_test.cdl
